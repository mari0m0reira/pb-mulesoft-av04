package br.com.compass.payment.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.persistence.EntityNotFoundException;
import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.compass.payment.controller.Estados;
import br.com.compass.payment.controller.EstadosDto;
import br.com.compass.payment.controller.EstadosForm;
import br.com.compass.payment.controller.URI;
import br.com.compass.payment.dto.PaymentDto;
import br.com.compass.payment.model.Payment;
import br.com.compass.payment.model.Pedido;
import br.com.compass.payment.repository.PaymentRepository;

@Service
public class PaymentService{
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private PaymentRepository paymentRepository;	
	

	public List<PaymentDto> findAllOrder(){
		return paymentRepository.findAll().stream()
                .map(p -> modelMapper.map(p, PaymentDto.class))
                .collect(Collectors.toList());
    }


	public ResponseEntity<PaymentDto> obterPorId(Long id) {
		 Optional<Payment> payment = paymentRepository.findById(id);
		 if(payment.isPresent()) {
				return ResponseEntity.ok(new PaymentDto(payment.get()));
			}else {
				return ResponseEntity.notFound().build();      
			}
	}
	
	public ResponseEntity<PaymentDto> cadastrar(@RequestBody @Valid Pedido pedido, UriComponentsBuilder uriBuider) {
			PaymentDto pay = new PaymentDto();
			pay.setPayment_status(pedido.);
		
			estadosRepository.save(estados);
			URI uri = uriBuider.path("api/v1/estados/{id}").buildAndExpand(estados.getId()).toUri();
			return ResponseEntity.created(uri).body(new EstadosDto(estados));
		} else {
			return ResponseEntity.badRequest().build();
		}
	}
	
	
	
}
